CREATE TABLE PARENT
(
  PARENT_ID BIGINT PRIMARY KEY,
  PHONE     VARCHAR(20),
  EMAIL     VARCHAR(20),
  PASSWORD  VARCHAR(50),
  ACTIVITY  VARCHAR(2),
  NAME      VARCHAR(40) NOT NULL,
  SURNAME   VARCHAR(30) NOT NULL
);

CREATE TABLE STUDENT
(
  STUDENT_ID        BIGINT PRIMARY KEY,
  FORM_NAME         VARCHAR(30),
  STUDENT_NAME      VARCHAR(30),
  STUDENT_SURNAME   VARCHAR(40),
  DATE_OF_BIRTH     DATE,
  STUDENT_EMAIL     VARCHAR(30),
  ACTIVE            INTEGER,
  BLOCKED           INTEGER,
  LAST_LOGIN_DATE   DATE
);

CREATE TABLE PERSON
(
  PERSON_ID     SERIAL PRIMARY KEY NOT NULL,
  NAME          VARCHAR(30)        NOT NULL,
  SURNAME       VARCHAR(40)        NOT NULL,
  CREATION_DATE DATE
);
CREATE TABLE STUDENT_PARENT
(
  ST_PA_ID      SERIAL PRIMARY KEY NOT NULL,
  STUDENT_ID_FK BIGINT             NOT NULL REFERENCES STUDENT (STUDENT_ID),
  PARENT_ID_FK  BIGINT             NOT NULL REFERENCES PARENT (PARENT_ID),
  CREATION_DATE DATE               NOT NULL
);
CREATE UNIQUE INDEX STUDENT_PARENT_ST_PA_ID_UINDEX ON STUDENT_PARENT (ST_PA_ID);

CREATE TABLE FORM
(
  FORM_ID              SERIAL PRIMARY KEY NOT NULL,
  STUDENT_TOTAL        INT,
  FORM_NAME            VARCHAR(20),
  TEACHER_NAME_SURNAME VARCHAR(50),
  TEACHER_EMAIL        VARCHAR(30),
  TEACHER_PHONE        VARCHAR(20),
  TOTAL_BALANCE        BIGINT,
  STUD_YEAR_FROM       DATE,
  STU_DYEAR_TO         DATE
);
CREATE UNIQUE INDEX "FORM_FORM_ID_UINDEX" ON FORM (FORM_ID);

CREATE TABLE EXPENSES
(
  EXPENSE_ID       SERIAL PRIMARY KEY NOT NULL,
  DATE_ACCURED     DATE,
  DESCRIPTION      VARCHAR(50),
  RESPONSIBLE      BIGINT REFERENCES PARENT (PARENT_ID),
  TYPE             BIGINT,
  EXPIRATION_DATE  DATE,
  DATE_INTO_SYSTEM DATE,
  ATTACHMENT_LINK  VARCHAR(100),
  AMOUNT           BIGINT
);
CREATE UNIQUE INDEX EXPENSES_EXPENSE_ID_UINDEX ON EXPENSES (EXPENSE_ID);

CREATE TABLE EXPENSE_HISTORY
(
  RECORD_ID            SERIAL PRIMARY KEY NOT NULL,
  FORM_ID_FK           BIGINT             NOT NULL REFERENCES FORM (FORM_ID),
  DATE_SAVED           DATE,
  EXPENSE_ID           BIGINT,
  EXPENSE_TOTAL_AMOUNT BIGINT,
  PARENT_ID_FK         BIGINT             NOT NULL REFERENCES PARENT (PARENT_ID)
);
CREATE TABLE PAYMENT_FROM_STUDENT_TO_ACCOUNT (
  PAYMENT_ID        BIGINT,
  STUDENT_FK        BIGINT NOT NULL REFERENCES STUDENT (STUDENT_ID),
  FORM_ID_FK        BIGINT NOT NULL REFERENCES FORM (FORM_ID),
  DATE_ADDED        DATE,
  DATE_IINTO_SYSTEM DATE,
  DESCRIPTION       VARCHAR(50),
  EXPENSE_ID        BIGINT REFERENCES EXPENSES (EXPENSE_ID),
  PAYMENT_AMOUNT    BIGINT,
  DATE_EXPIRED      DATE
);


